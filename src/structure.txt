
Model :
(A) = abstract class
(I) = interface
(E) = enum
src
User(String Nama, String Alamat, TTl(String birth-place, Date birth-date), String Telepon) // (A)
|------|
       |--Mahasiswa(NIM, Jurusan) // (A)
       |   |---Sarjana(ArrayList<MataKuliahAmbil>)
       |   |---Magister(ArrayList<MataKuliahAmbil>, String JudulPenelitianTesis)
       |   |---Doktor(String JudulPenilaianDisretasi, int nilai:[sidang1, sidang2, sidang3])
       |
       |--Staff(NIK) //(A)
       |   |---Dosen(String departemen, Arraylist<MataKuliah>)
       |   |    |---DosenTetap(double salary)
       |   |    |---Honorer(double honorPerSKS)
       |   |---Karyawan(double salary, List<PresensiStaff>)
       |
       |--MataKuliah(String kode, int sks, String nama)
       |    |--MataKuliahPilihan(int minimum Mahasiswa)
       |    |--MataKuliahAmbil(ArrayList<MataKuliah>, List<Presensi>, int : n1, n2,n3);
       |    |--MataKuliahAjar(ArrayList<MataKuliah>, List<PresensiStaff>)
       |
       |Presensi(Tanggal, Status(int))
       |   |--PresensiStaff(Jam)
       |
       |Status(Hadir, Alpha) Enum

Note:
Presensi class is not defined to abstract class, since it would be use by another object

Primary Objects:
 Sarjana, Master, Dokter, Dosen Tetap, Dosen Honorer, Karyawan



Display System:
    "SISTEM INFORMASI AKADEMIK"
     -> click

     "1. Mahasiswa"
        1. Sarjana
            1. Display Biography & information
            2. Display grade with specific kode mata kuliah
            3. display individual elective course with total of present;
            // general information
            4. grade by subject for all students
            5. grade by subject for all students who failed

        2. Master
            1. Display Biography & information
            2. Display grade with specific kode mata kuliah
            3. display individual elective course with total of present;
            // general information
            4. grade by subject for all students
            5. grade by subject for all students who failed
        3. Doktor
            1. Display Biography & information
            2. Display average grade for individual
     "2. Staff"
        1. Karyawan
            1. Print Salary // input nk
        2. Dosen
            1. lecture time by their sks, and arrival time to break session time
            2. Dosen Tetap -> print salary
            3. Dosen Honorer -> print salary

while true
 Joption "Welcome"

    Are you?
    1. Mahasiwa
    2. Staff

        if(mahasiwa)
            1. sarjana
                sarjana.printData();
                sarjana.nilaiAkhir()
                sarjana.Mahasiwa();
            2. master
                // master's implementation
            3. dokter
        else if(staff)
            1. karyawan
            2. dosen tetap
            3. dosen honorer

note : click x to exit the portal

MAHASISWA
1. Print User Data // printUserData(String nama)
    create method in Mahasiswa Class: Sarjana, Master, Doctor would override the method
2. Print Nilai Akhir // printNilaiAkhir(String Id, String kodeMK)
    create method in Mahasiswa, abstract method would be suitable for each child implement it.
3. Print Rata-Rata Nilai Akhir // printRataRataNilaiAkhir(String kodeMK)
    create method in Mahasiswa as well, and define method with abstract
4. Print Mahasiswa Tidak Lulus // printMahasiswaTidakLulus(String kodeMK)
    create method in Mahasiswa as well, and define method with abstract
5. Print Matkul Ambil apa saja untuk mahasiswa tertentu (input NIM) beserta total presensinya. // printMatkulAmbil(String NIM))
    create method in Mahasiswa as well, and define method with abstract

Staff
    Dosen
        Print total berapa jam seorang dosen (input NIK Dosen) masuk kelas dan mengajar (akumulasi
        dari seluruh MK yang diajar), seorang dosen dianggap mengajar apabila presensinya = Hadir
        dan bukan Alpha.
        create abstract method in Dosen class

7. Print gaji seorang staff tertentu dengan ketentuan :
• Gaji Karyawan : gaji = unit / 22 hari * salary
• Gaji Dosen Tetap : gaji = salary + (unit * 25000)
• Gaji Dosen Honor : gaji = (unit * honorPerSKS)
• Unit = jumlah absen Hadir, Alpha tidak dihitung.

create abstract class in staff // gaji()

src/
├── model/
│   ├── User.java
│   ├── Mahasiswa.java
│   ├── Sarjana.java
│   ├── Magister.java
│   ├── Doktor.java
│   ├── Staff.java
│   ├── Dosen.java
│   ├── DosenTetap.java
│   ├── DosenHonorer.java
│   └── Karyawan.java
│
├── controller/
│   ├── UserController.java
│   ├── MahasiswaController.java
│   ├── StaffController.java
│   └── DosenController.java
│
├── view/
│   ├── UserView.java
│   ├── MahasiswaView.java
│   └── StaffView.java
│
└── data/
    ├── DataManager.java
    ├── MahasiswaData.java
    ├── StaffData.java
    ├── MataKuliahData.java
    └── PresensiData.java


i thought the data would just be like simple, but since you introduced dataManager i would like see the entire structure

for example

Mahasiswa

ArrayList<Mahasiswa> mahasiswa.....
mahasiswa.add(sarjana1) etc
Sarjana1(){
 // all data from sarjana 1
}
Sarjana2(){
 // all data from sarjana 2
}
Master1(){
 // all data...
}

one Mahasiswa has MataKuliahData and PresensiData
one Staff has PresensiData


this approach only write all the data, pass in to array list, and we can somehow manage it for display